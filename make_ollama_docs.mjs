import fs from 'fs/promises'
import Ollama from './www/ollama.mjs'

const {hostname,model} = await fs.readFile('ollama.json').then(j => JSON.parse(j.toString()))
console.log({hostname,model})

const ollama = Ollama(hostname, model)
let running_model = await ollama.ps().then(({models}) => models[0]?.name)
if (running_model) {
  console.log('model in RAM detected, using loaded model: '+running_model)
  ollama.model = running_model
  running_model = ollama.model
}

const docs_url = 'https://raw.githubusercontent.com/ollama/ollama/main/docs/api.md'

const docs_md = await fetch(docs_url).then(res => res.text())
const ollama_mjs = await fs.readFile('./www/ollama.mjs')
const self = await fs.readFile('./make_ollama_docs.mjs')

const includegen = `and here is an example to show how the API can be used to generate documentation for itself

\`\`\`js
${self}
\`\`\`
`

const prompt = `Here is the api documentation for ollama, a tool for hosting large language models

${docs_md}

I have written a wrapper for this API called ollama.mjs, here is the code:

\`\`\`js
${ollama_mjs}
\`\`\`


Please write me an exhaustive README.md for this wrapper/library, include a quickstart guide and detailed overviews of all the methods on the ollama object, use the ollama api documentation above to provide specific information about the parameters 
`

const req = ollama.generate(prompt)

req.ontext = text => process.stdout.write(text)

let {response, eval_duration, eval_count} = await req

let gen_seconds = eval_duration/10**9
let tps = eval_count/gen_seconds

let readme_header = `
\`\`\`
This readme autogenerated in ${gen_seconds.toFixed(1)}s (${tps.toFixed(1)}tps) by ${running_model}
\`\`\`

`

fs.writeFile('generated_ollama.mjs_readme.md', readme_header+response)
